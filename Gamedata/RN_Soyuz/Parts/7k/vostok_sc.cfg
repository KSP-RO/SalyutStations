PART
{
// --- general parameters ---
name = rn_vostok_sc
module = Part
author = Raidernick

// --- asset parameters ---
MODEL
	{
	  model = RN_Soyuz/Parts/7k/vostok_sc
          scale = 0.80, 0.80, 0.80
	}
//mesh = vostok_sc.mu
scale = 0.80
rescaleFactor = 1

// --- node definitions ---
// definition format is Position X, Position Y, Position Z, Up X, Up Y, Up Z
node_stack_bottom = 0.0, -1.12398, 0.0, 0.0, -1.0, 0.0, 1
node_stack_para = -0.81345, 0.2886, 0.0, 0.0, 1.0, 0.0, 1

// --- editor parameters ---
TechRequired = generalRocketry
cost = 1800
category = Pods
subcategory = 0
title = Vostok Descent Module
manufacturer = RN Industries
description = Descent module for the Vostok spacecraft
// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
attachRules = 1,0,1,1,0

// --- standard part parameters ---
mass = 1.25
dragModelType = default
maximum_drag = 0.20
minimum_drag = 0.2
angularDrag = 2
crashTolerance = 55
breakingForce = 50000
breakingTorque = 50000
linearStrength = 22000
angularStrength = 22000
stagingIcon = COMMAND_POD
maxTemp = 800
emissiveConst = 0.9 // not too absorptive for reentry
thermalMassModifier = 1.0
vesselType = Ship
skinMaxTemp = 2500
MODULE
{
	name = ModuleReactionWheel
	
	PitchTorque = 3
	YawTorque = 3
	RollTorque = 3
	
	RESOURCE
	{
		name = ElectricCharge
		rate = 0.02
	}
}

RESOURCE
{
	name = ElectricCharge
	amount = 250
	maxAmount = 250
}

MODULE
{
	name = ModuleSAS
	SASServiceLevel = 3
}

MODULE
{
name = RasterPropMonitorComputer
}

MODULE
{
	name = ModuleDataTransmitter
	
	packetInterval = 0.24
	packetSize = 2
	
	packetResourceCost = 20.0
	requiredResource = ElectricCharge
		
	DeployFxModules = 0
}

MODULE
{
name = ModuleScienceExperiment

experimentID = crewReport

experimentActionName = Crew Report
resetActionName = Discard Crew Report
reviewActionName = Review Report

useStaging = False
useActionGroups = True
hideUIwhenUnavailable = True
rerunnable = True

xmitDataScalar = 2.0
}

MODULE
{
name = ModuleScienceContainer

reviewActionName = Review Stored Data
storeActionName = Store Experiments
evaOnlyStorage = True
storageRange = 3.0
} 

// --- internal setup ---
CrewCapacity = 1

MODULE
{
name = TankPriorityModule
Priority = 10
}

INTERNAL
{
  name = SoyuzPod
}


MODULE
{
	name = ModuleCommand
	minimumCrew = 1
	
	RESOURCE
	{
		name = ElectricCharge
		rate = 0.008
	}
}

//Connected Living
MODULE
{
	name = ModuleConnectedLivingSpace
	passable = true
}

MODULE
{
name = FSanimateGeneric
animationName = Deploy
startEventGUIName = Deploy Antennas
endEventGUIName = Undeploy Antennas
toggleActionName = Toggle Antennas
startDeployed = False
// Animation Layer. If you have more than one animation on a part, this must be unique for each one in order for them to not interrupt each other. If the stock engine heat animation module is used, thatâ€™s probably on layer 0, so make this 1 or higher.
layer = 1
playAnimationOnEditorSpawn = False
useActionEditorPopup = True
// If you have more than one FSanimateGeneric on a part, give each a unique ID to. This makes the popup menu appear in a separate location for each module, and not steal each others windows. values: 0-9.
moduleID = 0
}
	
MODULE
{
	name = ModuleAblator
	ablativeResource = Ablator
	lossExp = -6000
	lossConst = 0.007
	pyrolysisLossFactor = 10000
	ablationTempThresh = 500
	reentryConductivity = 0.01
}
RESOURCE
{
	name = Ablator
	amount = 200
	maxAmount = 200
}
	
	
	//TAC Life Support, 10 days, 1 person
	RESOURCE
    {
        name = Food
        amount = 3.657
        maxAmount = 3.657
    }
    RESOURCE
    {
        name = Water
        amount = 2.4167
        maxAmount = 2.4167
    }
    RESOURCE
    {
        name = Oxygen
        amount = 370.1267
        maxAmount = 370.1267
    }
    RESOURCE
    {
        name = CarbonDioxide
        amount = 0
        maxAmount = 0.1
    }
    RESOURCE
    {
        name = Waste
        amount = 0
        maxAmount = 0.333
    }
    RESOURCE
    {
        name = WasteWater
        amount = 0
        maxAmount = 0.1
    }

//Reflection shader plugin
    MODULE
    {
        name = ReflectiveShaderModule

        // Lower values for performance, higher values for aesthetics (you shouldn't ever need to go higher than 1024).
        CubeMapSize = 16

        // How deep the reflection will be ("how far the reflection camera will view")
        FarClipPlane = 500000000
		// How far away must something be before it is reflected
		NearClipPlane = .1

        // Set to false to render all 6 faces of the CubeMap at once (six times slower~)
        OneFacePerFrame = true

        // The shader to find. The reflective shaders are:
        // Reflective/Diffuse
        // Reflective/VertexLit
        // Reflective/Bumped Diffuse
		//Reflective/Bumped Specular
        ShaderName = Reflective/Bumped Diffuse
		realTimeReflection = False
		

        // The height of the parallax map. Values are accepted between 0.005 and 0.08.
        ParallaxHeight = 0.01

        // How reflective the reflection will be (Weakest 0.0 - 1.0 Strongest).
        ReflectionStrength = 0.50
		//ReflectionColor = 0, 0, 0, 0

        // Use this variable to specify which meshes to apply the shader to.
        // Not using this variable will default to the first found mesh.
        // Use the actual mesh name for the value. Or you could use:
        // all - to replace the shader on all meshes in the model.
        MeshesToChange = SC_Out,SC_HFOut,SC_HBOut,SC_CPanel

        // How shiny the specularity will be (if specular).
        // This value will be automatically set if it already exists on the previous shader and is not defined here.
        Shininess = 1.0
		updateRate = 130

        // These variables should be used together only.
        // These values will be automatically set if they already exist on the previous shader and are not defined here
        SpecColorR = 0.8
        SpecColorG = 0.8
        SpecColorB = 0.8
        SpecColorA = 0.8
		rimFalloff = 5.0
		rimColor = 0.8242, 0.6445, 0.1914, 1.0
		ReflectionColor = 0.6242, 0.6445, 0.69, 1.0
    }

}
